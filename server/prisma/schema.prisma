// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  courseId          String       @id @default(auto()) @map("_id") @db.ObjectId
  courseName        String
  courseDescription String
  thubmnailUrl      String
  studentId         String[]     @db.ObjectId
  teacherId         String       @db.ObjectId
  videos            Video[]
  teacher           Teacher      @relation(fields: [teacherId], references: [id])
  student           Student      @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignments       Assignment[]
  content           Content[]
  quiz              Quiz[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Student {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  studentName  String
  studentAge   Int
  phoneno      BigInt
  email        String
  password     String
  courses      Course[]
  profilePhoto String?
  submissionId String     @unique @db.ObjectId
  submission   Submission @relation(fields: [submissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Teacher {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherName  String
  teacherAge   Int
  phoneno      BigInt
  email        String
  password     String
  courses      Course[]
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  url         String
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assignment {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  courseId    String       @db.ObjectId
  course      Course       @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  deadline    DateTime
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  assignmentId String     @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  student      Student?
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Content {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  questionAnswers String
  courseId        String   @db.ObjectId
  course          Course   @relation(fields: [courseId], references: [courseId])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
